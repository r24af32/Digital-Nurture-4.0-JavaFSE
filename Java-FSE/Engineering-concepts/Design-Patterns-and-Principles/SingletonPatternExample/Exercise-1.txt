
Exercise 1: Implementing the Singleton Pattern – Step-by-Step Explanation

Step 1: Create a New Java Project
First, create a new Java project named SingletonPatternExample.

This project will include the Logger class and a Main class for testing.



Step 2: Define the Singleton Class
Create a class named Logger.

The goal is to ensure that only one object of Logger can be created, no matter how many times it is accessed.



Step 3: Add a Private Static Instance
Inside the Logger class, define a private static variable that holds the only instance of the class.

This is how we store the single object that we’ll return every time.

private static Logger instance;



Step 4: Make the Constructor Private
The constructor of Logger must be private.

This prevents other classes from creating objects using new Logger().

private Logger() {
    System.out.println("Logger Initialized");
}



Step 5: Provide a Public Static Method
Create a method called getInstance() which:

Checks if the instance already exists.

If not, creates a new one.

Always returns the same object.

public static Logger getInstance() {
    if (instance == null) {
        instance = new Logger(); // create only once
    }
    return instance;
}



Step 6: Add a Logging Method (Optional)
Add a simple method like log(String message) to simulate logging behavior.

java
Copy
Edit
public void log(String message) {
    System.out.println("Log: " + message);
}



Step 7: Test the Singleton Implementation
Create a Main class to test your singleton.

public class Main {
    public static void main(String[] args) {
        Logger logger1 = Logger.getInstance();
        logger1.log("This is the first log message.");

        Logger logger2 = Logger.getInstance();
        logger2.log("This is the second log message.");

        if (logger1 == logger2) {
            System.out.println("Both logger instances are the same (Singleton working).");
        } else {
            System.out.println("Different logger instances (Singleton failed).");
        }
    }
}



Output:

Logger Initialized
Log: This is the first log message.
Log: This is the second log message.
Both logger instances are the same (Singleton working).
